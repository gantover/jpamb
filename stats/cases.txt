jpamb.cases.Arrays.arrayContent:()V                          () -> assertion error
jpamb.cases.Arrays.arrayInBounds:()V                         () -> ok
jpamb.cases.Arrays.arrayIsNull:()V                           () -> null pointer
jpamb.cases.Arrays.arrayIsNullLength:()V                     () -> null pointer
jpamb.cases.Arrays.arrayLength:()V                           () -> ok
jpamb.cases.Arrays.arrayNotEmpty:([I)V                       ([I:1]) -> ok
jpamb.cases.Arrays.arrayNotEmpty:([I)V                       ([I:]) -> assertion error
jpamb.cases.Arrays.arrayOutOfBounds:()V                      () -> out of bounds
jpamb.cases.Arrays.arraySometimesNull:(I)V                   (0) -> out of bounds
jpamb.cases.Arrays.arraySometimesNull:(I)V                   (11) -> null pointer
jpamb.cases.Arrays.arraySpellsHello:([C)V                    ([C:'h', 'e', 'l', 'l', 'o']) -> ok
jpamb.cases.Arrays.arraySpellsHello:([C)V                    ([C:'x']) -> assertion error
jpamb.cases.Arrays.arraySpellsHello:([C)V                    ([C:]) -> out of bounds
jpamb.cases.Arrays.arraySumIsLarge:([I)V                     ([I:50, 100, 200]) -> ok
jpamb.cases.Arrays.arraySumIsLarge:([I)V                     ([I:]) -> assertion error
jpamb.cases.Arrays.binarySearch:(I)V                         (3) -> ok
jpamb.cases.Arrays.binarySearch:(I)V                         (6) -> assertion error
jpamb.cases.Calls.allPrimesArePositive:(I)V                  (-1) -> assertion error
jpamb.cases.Calls.allPrimesArePositive:(I)V                  (0) -> out of bounds
jpamb.cases.Calls.allPrimesArePositive:(I)V                  (100) -> ok
jpamb.cases.Calls.callsAssertFalse:()V                       () -> assertion error
jpamb.cases.Calls.callsAssertFib:(I)V                        (0) -> assertion error
jpamb.cases.Calls.callsAssertFib:(I)V                        (8) -> ok
jpamb.cases.Calls.callsAssertIf:(Z)V                         (false) -> assertion error
jpamb.cases.Calls.callsAssertIf:(Z)V                         (true) -> ok
jpamb.cases.Calls.callsAssertIfWithTrue:()V                  () -> ok
jpamb.cases.Calls.callsAssertTrue:()V                        () -> ok
jpamb.cases.Loops.forever:()V                                () -> *
jpamb.cases.Loops.neverAsserts:()V                           () -> *
jpamb.cases.Loops.neverDivides:()I                           () -> *
jpamb.cases.Loops.terminates:()V                             () -> assertion error
jpamb.cases.Simple.assertBoolean:(Z)V                        (false) -> assertion error
jpamb.cases.Simple.assertBoolean:(Z)V                        (true) -> ok
jpamb.cases.Simple.assertFalse:()V                           () -> assertion error
jpamb.cases.Simple.assertInteger:(I)V                        (0) -> assertion error
jpamb.cases.Simple.assertInteger:(I)V                        (1) -> ok
jpamb.cases.Simple.assertPositive:(I)V                       (-1) -> assertion error
jpamb.cases.Simple.assertPositive:(I)V                       (1) -> ok
jpamb.cases.Simple.checkBeforeAssert:(I)V                    (-1) -> assertion error
jpamb.cases.Simple.checkBeforeAssert:(I)V                    (0) -> ok
jpamb.cases.Simple.checkBeforeDivideByN2:(I)I                (0) -> ok
jpamb.cases.Simple.checkBeforeDivideByN2:(I)I                (1) -> ok
jpamb.cases.Simple.checkBeforeDivideByN:(I)I                 (0) -> assertion error
jpamb.cases.Simple.checkBeforeDivideByN:(I)I                 (1) -> ok
jpamb.cases.Simple.divideByN:(I)I                            (0) -> divide by zero
jpamb.cases.Simple.divideByN:(I)I                            (1) -> ok
jpamb.cases.Simple.divideByNMinus10054203:(I)I               (0) -> ok
jpamb.cases.Simple.divideByNMinus10054203:(I)I               (10054203) -> divide by zero
jpamb.cases.Simple.divideByZero:()I                          () -> divide by zero
jpamb.cases.Simple.divideZeroByZero:(II)I                    (0, 0) -> divide by zero
jpamb.cases.Simple.divideZeroByZero:(II)I                    (0, 1) -> ok
jpamb.cases.Simple.earlyReturn:()I                           () -> ok
jpamb.cases.Simple.justReturn:()I                            () -> ok
jpamb.cases.Simple.justReturnNothing:()V                     () -> ok
jpamb.cases.Simple.multiError:(Z)I                           (false) -> assertion error
jpamb.cases.Simple.multiError:(Z)I                           (true) -> divide by zero
jpamb.cases.Tricky.collatz:(I)V                              (0) -> assertion error
jpamb.cases.Tricky.collatz:(I)V                              (24) -> ok
jpamb.cases.Recursions.factorial:(I)I                        (100000) -> depth exceeded 
jpamb.cases.Recursions.factorial:(I)I                        (5) -> ok
jpamb.cases.Recursions.badFactorial:(I)I                     (5) -> depth exceeded
jpamb.cases.Recursions.badFactorial:(I)I                     (1) -> ok
jpamb.cases.Recursions.alwaysRecursive:()V                   () -> depth exceeded
jpamb.cases.Recursions.neverFactorial:(I)I                   (1) -> *
jpamb.cases.Recursions.product:(II)I                         (5, -1) -> depth exceeded
jpamb.cases.Recursions.product:(II)I                         (0, 0) -> ok
jpamb.cases.Recursions.sumDigits:(I)I                        (2147483647) -> ok
jpamb.cases.Recursions.binarySearch:([IIII)I                 ([I:2, 3, 4, 5, 6, 8, 9, 10, 25, 30, 50, 100], 2, 0, 11) -> ok
jpamb.cases.Recursions.binarySearch:([IIII)I                 ([I:], 1, 1, 1) -> out of bounds
jpamb.cases.Recursions.mergeSort:([III)V                     ([I: 2, 1, 3], 0, 2) -> ok
jpamb.cases.Recursions.mergeSort:([III)V                     ([I: ], 0, 0) -> out of bounds
jpamb.cases.Recursions.confusingRecursion:(I)I               (100) -> ok
jpamb.cases.Recursions.confusingRecursion:(I)I               (2147483647) -> depth exceeded
jpamb.cases.Recursions.confusingRecursion:(I)I               (99) -> assertion error
jpamb.cases.Recursions.gcd:(II)I                             (0, 0) -> ok
jpamb.cases.Recursions.fib:(I)I                              (100000) -> depth exceeded
jpamb.cases.Recursions.fib:(I)I                              (0) -> ok